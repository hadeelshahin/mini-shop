classes ==>blueprints -templates -oop princples 
2-code reuse
-main class more clean
-constructor
-make multibler objects with differnet data, same structure
-in the cinstructor we can add proties for the first time 
-Static methods, proprties, fileds:

In JavaScript, static properties, fields, and methods are attached to the class itself rather than instances of the class. They are accessed directly from the class without the need to instantiate an object. This distinction is useful for data or functionality that is related to the class as a whole rather than specific instances of the class.
Static properties and methods are useful for defining functionality or data that is related to the class itself rather than specific instances. They are accessed directly from the class, not from instances created from it.
/*****************************************************************************************************

Classes in programming languages, including JavaScript, are used to model and structure code in an object-oriented way. The decision to use classes depends on the nature of the problem you are solving and the design principles you want to follow. Here are some situations where using classes might be beneficial:

1. **Object-Oriented Design:**
   - Classes are fundamental to object-oriented programming (OOP), which is a design paradigm that emphasizes the organization of code around objects, encapsulation, inheritance, and polymorphism. If your application follows OOP principles, using classes is a natural choice.

2. **Code Organization:**
   - Classes provide a way to encapsulate related data and behavior, promoting a clean and organized code structure. Each class can represent a distinct concept or entity in your system.

3. **Reusability:**
   - Classes promote code reusability. Once you have defined a class for a specific functionality or entity, you can easily reuse it in different parts of your application or even in other projects.

4. **Abstraction:**
   - Classes allow you to create abstractions that hide complex implementation details. Users of a class only need to know how to interact with its public interface, making the code more maintainable and less prone to errors.

5. **Inheritance and Polymorphism:**
   - Classes support inheritance, allowing you to create a new class based on an existing one, inheriting its properties and methods. This can help avoid code duplication and enhance code flexibility.
   - Polymorphism, another OOP concept, allows objects of different classes to be treated as objects of a common base class. This can lead to more flexible and extensible code.

6. **Constructor Functions and Prototypes (in JavaScript):**
   - In JavaScript, classes were introduced in ECMAScript 2015 (ES6) to provide a more familiar syntax for creating objects with constructor functions and prototypes. They provide syntactic sugar over the existing prototype-based inheritance.

7. **Frameworks and Libraries:**
   - Many frameworks and libraries in various programming languages rely heavily on classes. If you are working with a framework or library that uses classes, it makes sense to follow the established conventions.

However, it's important to note that not all programming paradigms require or encourage the use of classes. Some functional programming languages, for example, emphasize pure functions and immutable data structures. The choice to use classes or other programming constructs depends on the specific requirements of your project and the programming paradigm you are following.
///////////////////////////////
- create product class
- create product list and append products to it 
-render productlist to the screen 

// adding to the cart
-add shopping cart with total value 
-whenever add items to cart change the sum using reduce method 

// classes-
product 
productlist
shop-main app class

//cart 
product list render list on screen 

- 